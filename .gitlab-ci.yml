stages:
  - test
  - build
  - publish
  - deploy

.go_setup:
  variables:
    GOPATH: "$CI_PROJECT_DIR/.cache"
    GOLANGCI_LINT_CACHE: $CI_PROJECT_DIR/.golangci-lint
  before_script:
    - cd server
    - mkdir -p .cache .golangci-lint
    - go mod vendor
    - cp config.template.yml config.yml
  cache:
    key: "$CI_COMMIT_REF_NAME-golang-cache"
    paths:
      - server/.cache/pkg/mod
      - server/.golangci-lint/

compile server:
  image: golang:latest
  stage: build
  only:
    changes:
        - server/**/*
  extends:
    - .go_setup
  script:
    - mkdir -p builded-binaries
    - go build -o builded-binaries ./...
  artifacts:
    paths:
      - server/builded-binaries
        
lint:
  extends: 
    - .go_setup
  image: golangci/golangci-lint:v1.50-alpine
  stage: test
  script:
    - golangci-lint --version
    # Write the code coverage report to gl-code-quality-report.json
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --out-format colored-line-number:stdout,code-climate:gl-code-quality-report.json
  artifacts:
    reports:
      codequality: server/gl-code-quality-report.json
    paths:
      - server/gl-code-quality-report.json

compile webui:
  stage: build
  image: node:16
  only:
    changes:
        - webui/**/*
  cache:
    key: '$CI_COMMIT_REF_NAME-node_modules'
    paths:
      - webui/node_modules
  before_script:
    - cd webui
    - npm config set @degrens-21:registry https://gitlab.pieter557.dscloud.me/api/v4/packages/npm/
    - npm config set -- '//gitlab.pieter557.dscloud.me/api/v4/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
    - npm config set always-auth true
    - yarn config set network-timeout 600000 -g
    - yarn --pure-lockfile
  script:
    - yarn build

build server image:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  only:
    refs:
        - master
    changes:
        - server/**/*
  script:
    - cd server
    - cp "$CONFIG_FILE" config.yml
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/server:latest -t $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/server:latest
    - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA

build webui image:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  only:
    refs:
        - master
    changes:
        - webui/**/*
  script:
    - cd webui 
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/webui:latest -t $CI_REGISTRY_IMAGE/webui:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/webui:latest
    - docker push $CI_REGISTRY_IMAGE/webui:$CI_COMMIT_SHA

Deploy:
  stage: deploy
  image: ubuntu:latest
  tags:
    - production
  only:
    refs:
      - master
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)

    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan "$SERVER_IP" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    # Login to docker registry with CI credentials
    - ssh "$SERVER_USER@$SERVER_IP" "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    # The use of single ticks is as-expected, otherwise we don't have access to the API_TOKEN variable
    - ssh "$SERVER_USER@$SERVER_IP" "~/panel/deploy/schedule-update.sh $API_TOKEN"
